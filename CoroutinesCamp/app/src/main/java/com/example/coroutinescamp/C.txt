Kotlin的协程和线程
·协程和线程分别是什么？ 线程就是线程，协程是基于线程的一套多线程方案（框架）
·协程和线程哪个更容易使用？协程更好用，协程基于线程的框架，肯定更好用
·协程相比线程的优势和劣势？优势：好用强大 劣势：上手难

协程和Executor：优势和劣势一样
协程和Handler：没法比较不在一个维度，Handler 特殊场景化的Executor



Retrofit对协程的支持
·Retrofit是什么？
·什么叫「对协程的支持」?



Kotlin的协程和RxJava
·RxJava是啥？
·RxJava好在哪？ 可以多次频繁的去切线程，让代码逻辑在不同的线程中去执行
·协程跟它相比有什么不同？  协程也可以多次切线程，写起来更简单方便一点

·选谁？ 线程切换便利程度比RxJava更方便，会逐渐替代更多RxJava操作符的功能，但不会把RxJava打掉




CoroutineScope
·协程「泄露」？
协程泄漏--线程泄露--内存泄漏
Coroutines -> ViewModel -> LiveData -> LifeCycles -> Room




本质探秘
·协程是怎么切线程的？
·协程为什么可以「挂记」却不卡主线程？
·协程的delay()和Thread.sleep()
    delay()性能更好？

协程的delay()是把代码逻辑切换到后台去计时了，所以不会影响UI线程，这就是不卡的原因。